"""
Django settings for example_app project.

Generated by 'django-admin startproject' using Django 3.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""
import os

import environ
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration

from {{cookiecutter.module_name}}.logging import before_send


env = environ.Env(DJANGO_DEBUG=(bool, True),
                  DJANGO_ALLOWED_HOSTS=(list, []),
                  SENTRY_DSN=(str, ''),
                  POSTGRES_REQUIRE_SSL=(bool, False),
                  DJANGO_ALLOW_SEARCH_INDEXING=(bool, False))

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Retrieve the secret key from the DJANGO_SECRET_KEY environment variable
SECRET_KEY = env('DJANGO_SECRET_KEY')

# Set the DJANGO_DEBUG environment variable to False to disable debug mode
DEBUG = env("DJANGO_DEBUG")

# Define DJANGO_ALLOWED_HOSTS as a comma-separated list of valid hosts,
# e.g. localhost,127.0.0.1,.herokuapp.com
ALLOWED_HOSTS = env('DJANGO_ALLOWED_HOSTS')


# Configure Sentry for error logging
if env('SENTRY_DSN'):
    sentry_sdk.init(
        dsn=env('SENTRY_DSN'),
        before_send=before_send,
        integrations=[DjangoIntegration()],
    )

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "webpack_loader",
    '{{cookiecutter.module_name}}'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = '{{cookiecutter.module_name}}.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates/', 'templates/{{ cookiecutter.module_name }}'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                '{{ cookiecutter.module_name }}.context_processors.base_context',
            ],
        },
    },
]

WSGI_APPLICATION = '{{cookiecutter.module_name}}.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {}

# env.db_url returns a dictionary of database connection settings derived
# from the connection string. we have some settings we want to always use
# so we uniont those settings with one coming from the db string
DATABASES["default"] = {
    "CONN_MAX_AGE": 600,
    "OPTIONS": {"sslmode": "require" if env("POSTGRES_REQUIRE_SSL") else "prefer"},
} | env.db_url(
    "DATABASE_URL",
    default='{{ "postgis" if cookiecutter.postgis else "postgres" }}://postgres:postgres@postgres:5432/{{cookiecutter.pg_db}}',
)

# Caching
# https://docs.djangoproject.com/en/3.0/topics/cache/

cache_backend = 'dummy.DummyCache' if DEBUG else 'db.DatabaseCache'
CACHES = {
    'default': {
        'BACKEND': f'django.core.cache.backends.{cache_backend}',
        'LOCATION': 'site_cache',
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.\
UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = '/static'
STATICFILES_DIRS = (os.path.join(BASE_DIR, "assets"),)
STATICFILES_STORAGE = env(
    'DJANGO_STATICFILES_STORAGE',
    default='whitenoise.storage.CompressedManifestStaticFilesStorage'
)
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
)

WEBPACK_LOADER = {
    "DEFAULT": {
        "CACHE": not DEBUG,
        "STATS_FILE": os.path.join(BASE_DIR, "webpack-stats.json"),
        "POLL_INTERVAL": not DEBUG,
        "IGNORE": [r".+\.hot-update.js", r".+\.map"],
    }
}

# Enforce SSL in production
if DEBUG is False:
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    SECURE_SSL_REDIRECT = True

# Disable search indexing by default. Set DJANGO_ALLOW_SEARCH_INDEXING env
# variable to True in container or deploymeny environment to enable indexing.
if env('DJANGO_ALLOW_SEARCH_INDEXING'):
    ALLOW_SEARCH_INDEXING = True
else:
    ALLOW_SEARCH_INDEXING = False
